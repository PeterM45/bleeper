/**
 * Character substitution constants and mapp  ['1', 'i'],
  ['!', 'i'],
  ['|', 'i'],gs
 *
 * Comprehensive collection of character substitutions for detecting
 * l33t speak, Unicode variants, and international characters.
 *
 * @module Normalization/Constants
 */

/**
 * Advanced character substitution map for comprehensive detection
 * Optimized for O(1) lookups with expanded international coverage
 */
export const CHAR_MAP = new Map([
  // Basic ASCII substitutions
  ['@', 'a'],
  ['4', 'a'],
  ['‚àÄ', 'a'],
  ['Œ±', 'a'],
  ['–∞', 'a'], // Cyrillic a
  ['8', 'b'],
  ['√ü', 'b'],
  ['6', 'b'],
  ['–≤', 'b'], // German √ü, Cyrillic –≤
  ['(', 'c'],
  ['{', 'c'],
  ['¬¢', 'c'],
  ['¬©', 'c'],
  ['—Å', 'c'], // Cyrillic —Å
  ['|)', 'd'],
  ['[)', 'd'],
  ['–æ', 'd'], // Cyrillic –æ as d
  ['3', 'e'],
  ['2', 'e'], // 2 can look like e in some fonts/contexts
  ['‚Ç¨', 'e'],
  ['–µ', 'e'],
  ['—ç', 'e'],
  ['Œµ', 'e'], // Greek epsilon
  ['—î', 'e'], // Cyrillic —î, Greek Œµ, Cyrillic –µ, —ç
  ['|=', 'f'],
  ['ph', 'f'],
  ['∆í', 'f'],
  ['6', 'g'],
  ['9', 'g'],
  ['&', 'g'],
  ['ŸÇ', 'g'], // Arabic ŸÇ
  // ['#', 'h'], // REMOVED: # should be boundary character, not substitution
  ['|-|', 'h'],
  ['–Ω', 'h'], // Cyrillic –Ω
  ['1', 'i'],
  ['!', 'i'],
  ['|', 'i'],
  ['Œπ', 'i'],
  ['—ñ', 'i'],
  ['—ó', 'i'], // Greek Œπ, Cyrillic —ñ, —ó
  ['_|', 'j'],
  ['—É', 'j'], // Cyrillic —É as j
  ['|<', 'k'],
  ['|{', 'k'],
  ['–∫', 'k'], // Cyrillic –∫
  ['/', 'l'],
  ['\\', 'l'],
  ['≈Ç', 'l'],
  ['ƒæ', 'l'],
  ['|v|', 'm'],
  ['^^', 'm'],
  ['–º', 'm'], // Cyrillic –º
  ['|\\|', 'n'],
  ['/\\/', 'n'],
  ['Œ∑', 'n'],
  ['–ø', 'n'], // Greek Œ∑, Cyrillic –ø as n
  ['0', 'o'],
  ['()', 'o'],
  ['[]', 'o'],
  ['Œø', 'o'],
  ['–æ', 'o'],
  ['√∏', 'o'], // Greek Œø, Cyrillic –æ, Danish √∏
  ['|*', 'p'],
  ['|>', 'p'],
  ['9', 'p'],
  ['—Ä', 'p'], // Cyrillic —Ä
  ['(_,)', 'q'],
  ['9', 'q'],
  ['12', 'r'],
  ['—è', 'r'],
  ['¬Æ', 'r'], // Cyrillic —è as r
  ['5', 's'],
  ['$', 's'],
  ['¬ß', 's'],
  ['—ï', 's'], // Cyrillic —ï
  ['7', 't'],
  ['+', 't'],
  ['‚Ä†', 't'],
  ['œÑ', 't'],
  ['—Ç', 't'], // Greek tau, Cyrillic —Ç
  ['*', 'u'], // Common l33t speak: f*ck -> fuck
  ['|_|', 'u'],
  ['œÖ', 'u'],
  ['Œº', 'u'],
  ['–∏', 'u'],
  ['—Ü', 'u'],
  ['v', 'u'], // Common l33t speak substitution
  ['√º', 'u'], // Umlaut u
  ['√π', 'u'], // Accented u
  ['√∫', 'u'], // Accented u
  ['√ª', 'u'], // Accented u variants, Greek œÖ, Œº, Cyrillic –∏, —Ü
  ['\\/', 'v'],
  ['ŒΩ', 'v'],
  ['–≤', 'v'], // Greek ŒΩ, Cyrillic –≤ as v
  ['vv', 'w'],
  ['\\/\\/', 'w'],
  ['œâ', 'w'],
  ['—â', 'w'], // Greek œâ, Cyrillic —â as w
  ['><', 'x'],
  ['√ó', 'x'],
  ['œá', 'x'],
  ['—Ö', 'x'], // Greek œá, Cyrillic —Ö
  ['`/', 'y'],
  ['Œ≥', 'y'],
  ['—É', 'y'],
  ['—á', 'y'], // Greek Œ≥, Cyrillic —É, —á
  ['2', 'z'],
  ['~', 'z'],
  ['Œ∂', 'z'],
  ['–∑', 'z'], // Greek Œ∂, Cyrillic –∑

  // Special Unicode lookalikes
  ['‚Ç≥', 'a'],
  ['‡∏ø', 'b'],
  ['‚Çµ', 'c'],
  ['‚Ç´', 'd'],
  ['‚Ç¨', 'e'],
  ['‚Ç£', 'f'],
  ['‚Ç≤', 'g'],
  ['‚Ç¥', 'h'],
  ['≈Ç', 'i'],
  ['‚Ç≠', 'k'],
  ['¬£', 'l'],
  ['‚Ç•', 'm'],
  ['‚Ç¶', 'n'],
  ['‚Ç±', 'p'],
  ['‚Çπ', 'r'],
  ['$', 's'],
  ['‚ÇÆ', 't'],
  ['Œº', 'u'],
  ['‚Ç©', 'w'],
  ['¬•', 'y'],

  // Emoji and symbols that represent letters
  ['üÖ∞Ô∏è', 'a'],
  ['üÖ±Ô∏è', 'b'],
  ['¬©Ô∏è', 'c'],
  ['üá©', 'd'],
  ['üìß', 'e'],
  ['üéè', 'f'],
  ['‚õΩ', 'g'],
  ['üè®', 'h'],
  ['‚ÑπÔ∏è', 'i'],
  ['üóæ', 'j'],
  ['üéã', 'k'],
  ['üè∑Ô∏è', 'l'],
  ['üìß', 'm'],
  ['üì∞', 'n'],
  ['‚≠ï', 'o'],
  ['üÖøÔ∏è', 'p'],
  ['üîç', 'q'],
  ['¬ÆÔ∏è', 'r'],
  ['üí∞', 's'],
  ['‚úùÔ∏è', 't'],
  ['‚õé', 'u'],
  ['‚úåÔ∏è', 'v'],
  ['„Ä∞Ô∏è', 'w'],
  ['‚ùå', 'x'],
  ['üí¥', 'y'],
  ['üí§', 'z'],
]);

/**
 * Multi-character substitutions - order matters, longest first
 * Applied before single character substitutions for optimal results
 */
export const MULTI_CHAR_SUBS: ReadonlyArray<readonly [string, string]> = [
  // English multi-char patterns
  ['ph', 'f'],
  ['xx', 'x'],
  ['kk', 'k'],
  ['teh', 'the'],
  ['pwn', 'own'],
  ['n00b', 'noob'],

  // Advanced l33t speak patterns
  ['|-|', 'h'],
  ['|_|', 'u'],
  ['|\\|', 'n'],
  ['|v|', 'm'],
  ['|*', 'p'],
  ['|>', 'p'],
  ['(_,)', 'q'],
  ['\\/', 'v'],
  ['vv', 'w'],
  ['\\/\\/', 'w'],
  ['><', 'x'],
  ['`/', 'y'],

  // International lookalike pairs
  ['th', 'th'],
  ['ng', 'ng'],
  ['ch', 'ch'],
  ['sh', 'sh'],
] as const;

/**
 * Characters that have multiple possible letter substitutions
 * Used for generating variant normalizations of ambiguous characters
 */
export const AMBIGUOUS_CHARS = new Map([
  ['1', ['i', 'l']], // 1 can be i or l
  ['|', ['i', 'l']], // | can be i or l
  ['l', ['l', 'i']], // l can be l or i (for cases like nlgga -> nigga)
  ['0', ['o', 'd']], // 0 can be o or d
  ['6', ['g', 'b']], // 6 can be g or b
  ['9', ['g', 'q']], // 9 can be g or q
] as const);

/**
 * Export for backward compatibility and testing
 * Combined single and multi-character substitutions
 */
export const CHAR_SUBSTITUTIONS: ReadonlyArray<readonly [string, string]> = [
  ...Array.from(CHAR_MAP.entries()),
  ...MULTI_CHAR_SUBS,
];
